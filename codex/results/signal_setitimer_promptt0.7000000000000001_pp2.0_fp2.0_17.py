import signal
# Test signal.setitimer()
# See also: https://docs.python.org/3/library/signal.html#signal.setitimer

def alarm_handler(signum, frame):
    print('Alarm!')
    signal.setitimer(signal.ITIMER_REAL, 0)  # Reset the alarm

signal.signal(signal.SIGALRM, alarm_handler)
signal.setitimer(signal.ITIMER_REAL, 0.5)  # 0.5 seconds

# Do something
while True:
    time.sleep(1)
    print('Not yet.')

# SIGALRM is generated by the operating system when the timer expires.
# SIGALRM is delivered to the process, which interrupts the read() system call.
# The signal handler is invoked by the kernel, which temporarily suspends the process.
# The signal handler returns, which restarts read() and returns EINTR to the process.
# The signal handler sets the new timer value.
# The process continues and prints Not yet.
